module boom(leave_times,sw7,start,clk,led,seg,sw_input,row,seg_cat,btn6,buzzer,green,red);
    input sw7,start,clk,btn6;
    input [6:0] sw_input;
    output buzzer;
    output [7:0] row,red,green;
    output [1:0] seg_cat;
    output [7:0] seg;
    output reg [6:0] led;

    reg [1:0] ps_input_times;
    reg success;                //游戏成功
    reg [6:0] password;         //保存的密码
    reg [1:0] game_state;       //游戏状态
    reg [4:0] countdown_times;  //倒计时的时间，最多仅用到1-20个状态


    output [4:0] leave_times;      //剩余的时间
    wire [1:0] music_state;
    wire [1:0] countdown_state;  //记录倒计时的状态
    wire [6:0] changing_pw;      //随机密码
    wire btn6_pulse;             //确认件消抖
    wire start_pulse;            //开始键消抖


    always @(posedge clk) begin
        if (!sw7) begin
            //关闭游戏，初始化
            ps_input_times<=0;
            led<=0;
            success<=0;
            game_state<=0;
            password<=0;
            countdown_times<=0;
        end
        else begin							//开始游戏
            if (game_state==0) begin        //炸弹动画不变
                if (start_pulse) begin
                    success<=0;
                    game_state<=1;
                    countdown_times<=5;
                    password<=changing_pw;
                end

            end
            else if (game_state==1) begin
                //5s倒计时，数字在数码管显示，led不变，炸弹动画显示(不变)
                led<=password;
                if (countdown_state==2&&leave_times==0) begin
                    countdown_times<=20;
                    game_state<=2;
                    led<=0;
                end

            end
            else if (game_state==2) begin
                //20s倒计时，数字在数码管显示，led显示密码输入，炸弹动画随时间变化
                led<=sw_input;
                if (ps_input_times<2) begin
                    if (btn6_pulse==1) begin
                        if (sw_input==password) begin
                            game_state<=3;
                            success<=1;
                            led<=0;
                        end
                        else begin
                            ps_input_times<=ps_input_times+1;
                        end
                    end

                    if (countdown_state==0&&leave_times==0) begin
                        game_state<=3;
                        success<=0;
                        led<=0;
                    end
                end
                else begin
                    game_state<=3;
                    success<=0;
                    led<=0;
                end
            end
            else if (game_state==3) begin
                if (music_state==2) begin
                    game_state<=0;
                    success<=0;
                    password<=0;
                    countdown_times<=0;
                    ps_input_times<=0;
                end
            end
        end
    end

    debounce debounce1(
                 .btn(start),
                 .clk(clk),
                 .rst(sw7),
                 .btn_pulse(start_pulse));

    debounce debounce2(
                 .btn(btn6),
                 .clk(clk),
                 .rst(sw7),
                 .btn_pulse(btn6_pulse));

    rand rand1(
             .clk(clk),
             .rst(sw7),
             .out(changing_pw));

    disp disp1(
             .clk(clk),
             .rst(sw7),
             .leave_times(leave_times),
             .game_state (game_state),
             .seg_cat(seg_cat),
             .seg_led(seg));

    countdown countdown1(
                  .clk(clk),
                  .rst(sw7),
                  .game_state(game_state),
                  .countdown_times(countdown_times),
                  .leave_times(leave_times),
                  .countdown_state(countdown_state));

    music music1(
              .clk(clk),
              .rst(sw7),
              .success(success),
              .game_state(game_state),
              .leave_times(leave_times),
              .buzzer(buzzer),
              .music_state(music_state));

    cartoon cartoon1(
                .game_state(game_state),
                .success(success),
                .clk(clk),
                .rst(sw7),
                .leave_times(leave_times),
                .green(green),
                .red(red),
                .row(row)
            );
endmodule
