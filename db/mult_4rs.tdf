--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX II" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=12 LPM_WIDTHB=11 LPM_WIDTHP=23 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 21.1 cbx_cycloneii 2022:06:23:22:03:45:SJ cbx_lpm_add_sub 2022:06:23:22:03:45:SJ cbx_lpm_mult 2022:06:23:22:03:45:SJ cbx_mgl 2022:06:23:22:04:21:SJ cbx_nadder 2022:06:23:22:03:45:SJ cbx_padd 2022:06:23:22:03:45:SJ cbx_stratix 2022:06:23:22:03:45:SJ cbx_stratixii 2022:06:23:22:03:45:SJ cbx_util_mgl 2022:06:23:22:03:45:SJ  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 187 
SUBDESIGN mult_4rs
( 
	dataa[11..0]	:	input;
	datab[10..0]	:	input;
	result[22..0]	:	output;
) 
VARIABLE
	add13_result[21..0]	:	WIRE;
	add17_result[17..0]	:	WIRE;
	add21_result[13..0]	:	WIRE;
	add25_result[9..0]	:	WIRE;
	add29_result[2..0]	:	WIRE;
	add9_result[24..0]	:	WIRE;
	cs1a[5..0] : carry_sum;
	cs2a[5..0] : carry_sum;
	le3a[13..0] : lcell;
	le4a[13..0] : lcell;
	le5a[13..0] : lcell;
	le6a[13..0] : lcell;
	le7a[13..0] : lcell;
	le8a[12..0] : lcell;
	sft10a[24..0] : soft;
	sft11a[24..0] : soft;
	sft12a[24..0] : soft;
	sft14a[21..0] : soft;
	sft15a[21..0] : soft;
	sft16a[21..0] : soft;
	sft18a[17..0] : soft;
	sft19a[17..0] : soft;
	sft20a[17..0] : soft;
	sft22a[13..0] : soft;
	sft23a[13..0] : soft;
	sft24a[13..0] : soft;
	sft26a[9..0] : soft;
	sft27a[9..0] : soft;
	sft28a[9..0] : soft;
	sft30a[2..0] : soft;
	sft31a[2..0] : soft;
	sft32a[2..0] : soft;
	dataa_node[11..0]	: WIRE;
	datab_node[10..0]	: WIRE;
	final_result_node[22..0]	: WIRE;
	w153w[13..0]	: WIRE;
	w216w[13..0]	: WIRE;
	w268w[13..0]	: WIRE;
	w330w[13..0]	: WIRE;
	w392w[13..0]	: WIRE;
	w492w	: WIRE;
	w520w	: WIRE;
	w786w[24..0]	: WIRE;
	w7w[11..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out;
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	add29_result[] = sft30a[].out + sft31a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	cs1a[].cin = ( ((w7w[10..10] & cs1a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs1a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( ((((((! w7w[11..11]) & w7w[10..10]) & cs1a[4].cout) # ((w7w[11..11] & w7w[10..10]) & (! cs1a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs1a[4].cout)) # ((w7w[11..11] & (! w7w[10..10])) & (! cs1a[4].cout))), ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), ((((((! w7w[7..7]) & w7w[6..6]) & cs1a[2].cout) # ((w7w[7..7] & w7w[6..6]) & (! cs1a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs1a[2].cout)) # ((w7w[7..7] & (! w7w[6..6])) & (! cs1a[2].cout))), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs2a[].cin = ( ((w7w[10..10] & cs2a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs2a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs2a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs2a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs2a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs2a[].sin = ( ((((((! w7w[11..11]) & (! w7w[10..10])) & cs2a[4].cout) # (((! w7w[11..11]) & w7w[10..10]) & (! cs2a[4].cout))) # ((w7w[11..11] & w7w[10..10]) & (! cs2a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs2a[4].cout)), ((((((! w7w[9..9]) & (! w7w[8..8])) & cs2a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs2a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs2a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs2a[3].cout)), ((((((! w7w[7..7]) & (! w7w[6..6])) & cs2a[2].cout) # (((! w7w[7..7]) & w7w[6..6]) & (! cs2a[2].cout))) # ((w7w[7..7] & w7w[6..6]) & (! cs2a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs2a[2].cout)), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs2a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs2a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs2a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs2a[0].cout)), w7w[0..0]);
	le3a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[0].sout) & (! cs2a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[0].sout) & cs2a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[0].sout)) & cs2a[0].sout)))));
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[1].sout) & (! cs2a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[1].sout) & cs2a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[1].sout)) & cs2a[1].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[2].sout) & (! cs2a[2].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[2].sout) & cs2a[2].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[2].sout)) & cs2a[2].sout)))));
	le6a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[3].sout) & (! cs2a[3].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[3].sout) & cs2a[3].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[3].sout)) & cs2a[3].sout)))));
	le7a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[4].sout) & (! cs2a[4].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[4].sout) & cs2a[4].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[4].sout)) & cs2a[4].sout)))));
	le8a[].in = ((cs1a[5].sout & ( dataa_node[], B"0")) # (cs2a[5].sout & ( B"0", dataa_node[])));
	sft10a[].in = ( w492w, ( w492w, ( le8a[12..12].out, ( sft16a[19..19].out, ( sft16a[18..18].out, ( sft16a[17..17].out, ( sft16a[16..16].out, ( sft16a[15..15].out, ( sft16a[14..14].out, ( sft16a[13..13].out, ( sft16a[12..12].out, ( sft16a[11..11].out, ( sft16a[10..10].out, ( sft16a[9..9].out, ( sft16a[8..8].out, ( sft16a[7..7].out, ( sft16a[6..6].out, ( sft16a[5..5].out, ( sft16a[4..4].out, ( sft16a[3..3].out, ( sft16a[2..2].out, ( le4a[1..1].out, ( le4a[0..0].out, ( le3a[1..0].out))))))))))))))))))))))));
	sft11a[].in = ( w520w, ( sft16a[21..21].out, ( sft16a[20..20].out, ( sft20a[17..17].out, ( sft20a[16..16].out, ( sft20a[15..15].out, ( sft20a[14..14].out, ( sft20a[13..13].out, ( sft20a[12..12].out, ( sft20a[11..11].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, ( sft20a[0..0].out, ( sft16a[1..1].out, ( sft16a[0..0].out, ( w520w, cs1a[0].sout))))))))))))))))))))))));
	sft12a[].in = add9_result[];
	sft14a[].in = ( w520w, ( w492w, ( le8a[11..11].out, ( le8a[10..10].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le8a[4..4].out, ( sft24a[7..7].out, ( le8a[2..2].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le3a[3..2].out)))))))))))))))))))));
	sft15a[].in = ( w520w, ( w520w, ( (! w392w[13..13]), ( le7a[12..12].out, ( le7a[11..11].out, ( sft24a[12..12].out, ( sft24a[11..11].out, ( sft24a[10..10].out, ( sft24a[9..9].out, ( sft24a[8..8].out, ( sft28a[5..5].out, ( sft24a[6..6].out, ( sft24a[5..5].out, ( sft24a[4..4].out, ( sft24a[3..3].out, ( sft24a[2..2].out, ( sft24a[1..1].out, ( sft24a[0..0].out, ( le4a[3..3].out, ( le4a[2..2].out, ( w520w, cs1a[1].sout)))))))))))))))))))));
	sft16a[].in = add13_result[];
	sft18a[].in = ( w520w, ( w492w, ( (! w330w[13..13]), ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( sft28a[7..7].out, ( sft28a[6..6].out, ( le8a[3..3].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le5a[3..3].out, ( le5a[2..2].out, ( le3a[5..5].out, cs1a[2].sout)))))))))))))))));
	sft19a[].in = ( w520w, ( w520w, ( sft24a[13..13].out, ( le6a[12..12].out, ( sft28a[9..9].out, ( sft28a[8..8].out, ( sft32a[2..2].out, ( sft32a[1..1].out, ( sft32a[0..0].out, ( sft28a[4..4].out, ( sft28a[3..3].out, ( sft28a[2..2].out, ( sft28a[1..1].out, ( sft28a[0..0].out, ( le4a[5..5].out, ( le4a[4..4].out, ( w520w, le3a[4..4].out)))))))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w520w, ( w492w, ( le6a[11..11].out, ( le6a[10..10].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le5a[5..5].out, ( le5a[4..4].out, ( le3a[7..6].out)))))))))))));
	sft23a[].in = ( w520w, ( w520w, ( (! w268w[13..13]), ( le5a[12..12].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le5a[8..8].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le4a[7..7].out, ( le4a[6..6].out, ( w520w, cs1a[3].sout)))))))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w520w, ( w492w, ( le5a[11..11].out, ( le5a[10..10].out, ( le5a[9..9].out, ( le4a[10..10].out, ( le4a[9..9].out, ( le4a[8..8].out, ( le3a[9..9].out, cs1a[4].sout)))))))));
	sft27a[].in = ( w520w, ( w520w, ( (! w216w[13..13]), ( le4a[12..12].out, ( le4a[11..11].out, ( le3a[12..12].out, ( le3a[11..11].out, ( le3a[10..10].out, ( w520w, le3a[8..8].out)))))))));
	sft28a[].in = add25_result[];
	sft30a[].in = ( w520w, ( w492w, w492w));
	sft31a[].in = ( w520w, ( w520w, (! w153w[13..13])));
	sft32a[].in = add29_result[];
	dataa_node[] = ( dataa[11..0]);
	datab_node[] = ( datab[10..0]);
	final_result_node[] = ( w786w[22..0]);
	result[] = ( final_result_node[22..0]);
	w153w[] = le3a[].out;
	w216w[] = le4a[].out;
	w268w[] = le5a[].out;
	w330w[] = le6a[].out;
	w392w[] = le7a[].out;
	w492w = B"1";
	w520w = B"0";
	w786w[] = ( sft12a[24..23].out, sft12a[22..21].out, sft12a[20..19].out, sft12a[18..17].out, sft12a[16..15].out, sft12a[14..13].out, sft12a[12..11].out, sft12a[10..9].out, sft12a[8..7].out, sft12a[6..5].out, sft12a[4..3].out, sft12a[2..1].out, sft12a[0..0].out);
	w7w[] = ( B"0", datab_node[]);
END;
--VALID FILE
